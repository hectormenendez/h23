--------
v0.0.688
--------
×	Implement the FTP::mirror method.

×	Rewrite the XML library, using the scheme recently defined in the FTP library.

»	[FIXED] Check if the database library is closing all its connections. [NOTE] Added the
	ability to use destructors even when using static methods, so the connections can be
	shut down automatically.

»	[FIXED] With the new method of error handling, All warnings and notices are being sent,
	this  is good when developing, but sometimes we want to surpress even those warnings and
	perform actions without the user noticing, so we use a error control operator such as @.
	but since the custom error handler manages EVERY error we need to use a try - catch block
	for those actions. REVIEW the whole framework and replace blocks of code relying in @ to
	surpress warnings, and replace them with try-catch blocks. [EDIT] It turned out that i
	was mistaken aboyt the need of reviewing the whole FW, when @ is used error_reporting is
	set to 0, and since error reporting was set to 0 on index.php there was no way of knowing
	when the user was trying to hide an error using the control operator. Fixed this, setting
	the error control directive to E_ALL(1) but avoiding those errors which the custom error
	handler can't manage. this way we catch everything in our custom error handler.

×	Find  a way to document at least the Core. things are getting big to remember every
	feature on this framework. isn't that cool?

×	create a a way for the user to add code to	the newly created shutdown function.

»	[FIXED] Make sure to catch every error sent by the parser and format them. [EDIT]
	I think it's time for the error handler to have its own library, it got very big
	to still be held on the	core.

×	Create a shell script to handle subversion commit.

×	use the system.chk file as a cache for the CONSTANT definitions. Instead of putting a
	timestamp on the file use php's function to determine the last modification time. and
	store there the information gathered on the	first framework run, this way it will act
	as a cache file, thus avoiding to process the index everytime.

--------
v0.0.686
--------

×	All the files, have a die() statement at the beginning of the file, to prevent access
	to it, without the framework being loaded first. It would be nice if that end statement
	would be replaced by some nifty redirection to the 403 template. with correct headers
	of course, oh and by the way... Implement a template handling system for error pages.

×	{DB_Cache::delete()} is called whenever a write type sql statement is queried, it would
	be a nice idea to implement this methodology to fix the bug in {Session} where the temp
	files aren't being deleted.

×	This is a tough one, {Db_Driver::field_rename()} was removed on this revision due to
	the fact that MySQL versions previous to 5.1, would remove all the info stored in it.
	I think it's a very important method to ignore it, so in order to re-include it,
	a quick check for the field to be empty prior any action could prevent the damage and
	still offer the ability. Another approach could be using temporary data to backup and
	then after the rename, restore.

×   I don't like the way {DB_Driver::_identifiers_protect} is coded and used. A check has
	to be made to simplify this, specially because it makes use of regular expressions and
	I think there are ways to avoid it.

×	In order to simplify the developing of {DB_Driver} all the utility and forge methods
	were merged and declared inside it. Causing a little bloat, It isn't an issue yet, but
	a rollback to the previous methodology could be an option.

×	During the developing of this revision, I felt like the field templates array shouldn't
	be declared on {Core::config} but in a separated file, like the routes. Analize it.

×	{DB_Driver->keys} and {DB_Driver-pkeys} aren't used right now, because it's use hasn't
	been proved as necesary. But a check has to be made in order to ensure this.
	Also, The feeling of something missing with the methodology for handling is high.
	a second check is recommended.

×	{DB_Driver} is missing some utility methods to develop, (table_backup, optimize, etc.)

×	When the user doesn't specify a database name {DB_Driver} shouldn't allow to use the
	table and field operations. All those methods, must return false.

--------
v0.0.670
--------

×	The Session library doesn't seem to be removing correctly the expired sessions,
	causing the tmp folder to be flooded with these files. It seems to be a problem with
	the XML library since after a quick check, some of the variables weren't obtaining the
	correct info from the xml. (I think the xml library needs to be rewritten).

--------
v0.0.662
--------

×	Test the framework in apache for windows prior to vista.
